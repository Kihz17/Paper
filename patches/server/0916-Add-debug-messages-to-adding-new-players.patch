From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kihz17 <mitchdawdy@gmail.com>
Date: Sat, 4 Jun 2022 15:36:23 -0400
Subject: [PATCH] Add debug messages to adding new players


diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 59acbf6249f8f5285504c0ddea448a3433d1d68d..8a01b2cdf9c7df3412259517b27f0f73d0ccb502 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -496,7 +496,9 @@ public class ServerChunkCache extends ChunkSource {
     private long asyncLoadSeqCounter;
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkAtAsynchronously(int x, int z, boolean gen, boolean isUrgent) {
+        LOGGER.debug("Chunk at async");
         if (Thread.currentThread() != this.mainThread) {
+            LOGGER.debug("Not main thread");
             CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> future = new CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>();
             this.mainThreadProcessor.execute(() -> {
                 this.getChunkAtAsynchronously(x, z, gen, isUrgent).whenComplete((chunk, ex) -> {
@@ -510,6 +512,7 @@ public class ServerChunkCache extends ChunkSource {
             return future;
         }
 
+        LOGGER.debug("Main thread chubk async");
         long k = ChunkPos.asLong(x, z);
         ChunkPos chunkPos = new ChunkPos(x, z);
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 20cdfdb3b9351f74e89bc45b3ab972384165659a..0162fceb11549853e237e6624a6be0d2e8a852fe 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -296,13 +296,17 @@ public abstract class PlayerList {
         distanceManager.addTicket(net.minecraft.server.level.TicketType.LOGIN, pos, 31, pos.toLong());
         worldserver1.getChunkSource().markAreaHighPriority(pos, 28, 3); // Paper - Chunk priority
         worldserver1.getChunkSource().getChunkAtAsynchronously(chunkX, chunkZ, true, false).thenApply(chunk -> { // Paper - Chunk priority
+            LOGGER.debug("First and then");
             net.minecraft.server.level.ChunkHolder updatingChunk = playerChunkMap.getUpdatingChunkIfPresent(pos.toLong());
             if (updatingChunk != null) {
+                LOGGER.debug("Chunk not null");
                 return updatingChunk.getEntityTickingChunkFuture();
             } else {
+                LOGGER.debug("Was null");
                 return java.util.concurrent.CompletableFuture.completedFuture(chunk);
             }
         }).thenAccept(chunk -> {
+            LOGGER.debug("Final step");
             playerconnection.playerJoinReady = () -> {
                 postChunkLoadJoin(
                     player, finalWorldserver, connection, playerconnection,
