From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kihz17 <mitchdawdy@gmail.com>
Date: Fri, 17 Jun 2022 20:33:14 -0400
Subject: [PATCH] Add meta add add player packet events.


diff --git a/src/main/java/com/destroystokyo/paper/events/AddPlayerPacketEvent.java b/src/main/java/com/destroystokyo/paper/events/AddPlayerPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..95de05174134dfccda6404f71b54d5f0eaba4649
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/events/AddPlayerPacketEvent.java
@@ -0,0 +1,48 @@
+package com.destroystokyo.paper.events;
+
+import net.minecraft.network.protocol.game.ClientboundAddPlayerPacket;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+public class AddPlayerPacketEvent extends PlayerEvent implements Cancellable {
+    private ClientboundAddPlayerPacket packet;
+    private boolean cancelled;
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public AddPlayerPacketEvent(@NotNull Player who, ClientboundAddPlayerPacket packet) {
+        super(who);
+        this.packet = packet;
+    }
+
+    public ClientboundAddPlayerPacket getPacket() {
+        return packet;
+    }
+
+    public void setPacket(ClientboundAddPlayerPacket packet) {
+        this.packet = packet;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/events/SendEntityDataPacketEvent.java b/src/main/java/com/destroystokyo/paper/events/SendEntityDataPacketEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d2ae4443f68f85590c444fae5556001905e3dfc
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/events/SendEntityDataPacketEvent.java
@@ -0,0 +1,47 @@
+package com.destroystokyo.paper.events;
+
+import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
+import net.minecraft.network.syncher.SynchedEntityData;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+public class SendEntityDataPacketEvent extends PlayerEvent implements Cancellable {
+    private final List<SynchedEntityData.DataItem<?>> dataItems;
+    private boolean cancelled;
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public SendEntityDataPacketEvent(@NotNull Player who, ClientboundSetEntityDataPacket packet) {
+        super(who);
+        this.dataItems = packet.getUnpackedData();
+    }
+
+    public List<SynchedEntityData.DataItem<?>> getDataItems() {
+        return dataItems;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index cc7ec0025117a318f89c0f3d43c13043a56f25ef..a0106a613c8cb38ed3baf654807d7f295b184427 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -1,31 +1,16 @@
 package net.minecraft.server.level;
 
-import com.destroystokyo.paper.events.BroadcastEntityMovePacketEvent;
-import com.destroystokyo.paper.events.BroadcastEntityVelocityPacketEvent;
-import com.destroystokyo.paper.events.PlayerTrackEntityEvent;
+import com.destroystokyo.paper.events.*;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
+
+import java.util.*;
 import java.util.function.Consumer;
+import java.util.stream.Collectors;
+
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
-import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundRotateHeadPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundSetPassengersPacket;
-import net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
@@ -42,6 +27,7 @@ import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Server;
 import org.slf4j.Logger;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 // CraftBukkit start
@@ -314,9 +300,22 @@ public class ServerEntity {
         Packet<?> packet = this.entity.getAddEntityPacket();
 
         this.yHeadRotp = Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F);
-        consumer.accept(packet);
+
+        if(packet instanceof ClientboundAddPlayerPacket addPlayerPacket) {
+            AddPlayerPacketEvent event = new AddPlayerPacketEvent(entityplayer.getBukkitEntity(), addPlayerPacket);
+            level.getCraftServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled())
+                entityplayer.connection.send(event.getPacket());
+        } else {
+            consumer.accept(packet);
+        }
+
         if (!this.entity.getEntityData().isEmpty()) {
-            consumer.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.entity.getEntityData(), true));
+            ClientboundSetEntityDataPacket dataPacket = new ClientboundSetEntityDataPacket(this.entity.getId(), this.entity.getEntityData(), true);
+            SendEntityDataPacketEvent event = new SendEntityDataPacketEvent(entityplayer.getBukkitEntity(), dataPacket);
+            level.getCraftServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled())
+                entityplayer.connection.send(dataPacket);
         }
 
         boolean flag = this.trackDelta;
@@ -405,7 +404,32 @@ public class ServerEntity {
         SynchedEntityData datawatcher = this.entity.getEntityData();
 
         if (datawatcher.isDirty()) {
-            this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), datawatcher, false));
+            List<SynchedEntityData.DataItem<?>> dirtyItems = datawatcher.packDirty();
+
+            if(dirtyItems != null) {
+
+                // Send to tracked players
+                for (ServerPlayerConnection connection : trackedPlayers) {
+                    List<SynchedEntityData.DataItem<?>> clonedList = dirtyItems.stream()
+                        .map(SynchedEntityData.DataItem::copy)
+                        .collect(Collectors.toList());
+
+                    ClientboundSetEntityDataPacket clonedPacket = new ClientboundSetEntityDataPacket(entity.getId(), clonedList);
+                    SendEntityDataPacketEvent event = new SendEntityDataPacketEvent(connection.getPlayer().getBukkitEntity(), clonedPacket);
+                    level.getCraftServer().getPluginManager().callEvent(event);
+                    if(!event.isCancelled())
+                        connection.send(clonedPacket);
+                }
+
+                // We are a player, send to ourselves
+                if(entity instanceof ServerPlayer player) {
+                    ClientboundSetEntityDataPacket clonedPacket = new ClientboundSetEntityDataPacket(entity.getId(), dirtyItems);
+                    SendEntityDataPacketEvent event = new SendEntityDataPacketEvent(player.getBukkitEntity(), clonedPacket);
+                    level.getCraftServer().getPluginManager().callEvent(event);
+                    if(!event.isCancelled())
+                        player.connection.send(clonedPacket);
+                }
+            }
         }
 
         if (this.entity instanceof LivingEntity) {
